{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { FlowValidator } from 'src/app/validators/flow-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/graph-init.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SendFlowComponent_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const path_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.printPath(path_r3), \" \");\n  }\n}\nfunction SendFlowComponent_div_6_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter a flow amount.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SendFlowComponent_div_6_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter an integer.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SendFlowComponent_div_6_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Flow does not respect capacity constraint!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SendFlowComponent_div_6_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, SendFlowComponent_div_6_div_7_div_1_Template, 3, 0, \"div\", 7);\n    i0.ɵɵtemplate(2, SendFlowComponent_div_6_div_7_div_2_Template, 3, 0, \"div\", 7);\n    i0.ɵɵtemplate(3, SendFlowComponent_div_6_div_7_div_3_Template, 3, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.flow.errors == null ? null : ctx_r4.flow.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.flow.errors == null ? null : ctx_r4.flow.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.flow.errors == null ? null : ctx_r4.flow.errors[\"checkFlowCapacity\"]);\n  }\n}\nfunction SendFlowComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"form\", 17);\n    i0.ɵɵlistener(\"ngSubmit\", function SendFlowComponent_div_6_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onSubmit());\n    });\n    i0.ɵɵelementStart(2, \"div\", 18)(3, \"div\", 19)(4, \"label\", 20);\n    i0.ɵɵtext(5, \"Enter a flow amount for this edge\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, SendFlowComponent_div_6_div_7_Template, 4, 3, \"div\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 23)(9, \"button\", 24);\n    i0.ɵɵtext(10, \"Continue\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.flowFormGroup);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.flow.invalid && (ctx_r1.flow.touched || ctx_r1.flow.dirty));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.flowFormGroup.invalid);\n  }\n}\nfunction SendFlowComponent_div_15_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter a flow amount.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SendFlowComponent_div_15_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter an integer.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SendFlowComponent_div_15_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, SendFlowComponent_div_15_div_7_div_1_Template, 3, 0, \"div\", 7);\n    i0.ɵɵtemplate(2, SendFlowComponent_div_15_div_7_div_2_Template, 3, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.flowVal.errors == null ? null : ctx_r10.flowVal.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.flowVal.errors == null ? null : ctx_r10.flowVal.errors[\"pattern\"]);\n  }\n}\nfunction SendFlowComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"form\", 26);\n    i0.ɵɵlistener(\"ngSubmit\", function SendFlowComponent_div_15_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.compute());\n    });\n    i0.ɵɵelementStart(2, \"div\", 18)(3, \"div\", 19)(4, \"label\", 27);\n    i0.ɵɵtext(5, \"Enter the flow value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, SendFlowComponent_div_15_div_7_Template, 3, 2, \"div\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 29);\n    i0.ɵɵtext(9, \" Check \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.flowCalculateGroup);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.flowVal.invalid && (ctx_r2.flowVal.touched || ctx_r2.flowVal.dirty));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.flowCalculateGroup.invalid);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    display: a0\n  };\n};\nexport let SendFlowComponent = /*#__PURE__*/(() => {\n  class SendFlowComponent {\n    get flow() {\n      return this.flowFormGroup.get('flow');\n    }\n    get flowVal() {\n      return this.flowCalculateGroup.get('flowVal');\n    }\n    constructor(formBuilder, graphInitServices, router) {\n      this.formBuilder = formBuilder;\n      this.graphInitServices = graphInitServices;\n      this.router = router;\n      this.msg = 'Select an edge by clicking on the graph.';\n      this.counter = new BehaviorSubject(0);\n      this.edgeSource = new BehaviorSubject(0); // invalid source id (1-indexing)\n      this.edgeTarget = new BehaviorSubject(0); // invalid target id (1-indexing)\n      this.edgeCapacity = new BehaviorSubject(0); // invalid capacity\n      this.isFlowInvalid = false;\n      this.showForm = false;\n      this.showFlowInput = false;\n      this.edgeError = 'none';\n      this.flowError = 'none';\n      this.showResult = 'none';\n      this.flowFormGroup = this.formBuilder.group({\n        flow: new FormControl('0', [Validators.required, Validators.pattern('^(0|[1-9][0-9]*)$'), FlowValidator.checkFlowCapacity(this.edgeCapacity)])\n      });\n      this.flowCalculateGroup = this.formBuilder.group({\n        flowVal: new FormControl('0', [Validators.required, Validators.pattern('^(0|[1-9][0-9]*)$')])\n      });\n    }\n    ngOnInit() {\n      this.paths = this.graphInitServices.paths;\n      this.sourceTxt = this.graphInitServices.sourceNode.id.toString();\n      this.sinkTxt = this.graphInitServices.sinkNode.id.toString();\n      this.graphInitServices.cy.on('tap', e => {\n        if (e.target._private.group == 'edges') {\n          let sourceId = +e.target._private.data['source'];\n          let sinkId = +e.target._private.data['target'];\n          if (this.graphInitServices.network.isEdgeInPaths(sourceId, sinkId, this.paths)) {\n            this.graphInitServices.removeHighlightedEdges();\n            this.flowFormGroup.reset();\n            this.msg = `Edge ${sourceId} -> ${sinkId} selected.`;\n            this.showForm = true;\n            this.showFlowInput = false;\n            this.selectedEdge = this.graphInitServices.cy.edges().getElementById(e.target._private.data['id']);\n            this.edgeSource.next(sourceId);\n            this.edgeTarget.next(sinkId);\n            this.edgeCapacity.next(this.graphInitServices.network.adjMatrix[this.edgeSource.getValue()][this.edgeTarget.getValue()].capacity);\n            this.selectedEdge.addClass('highlighted');\n          } else {\n            this.selectedEdgeTxt = `${sourceId} -> ${sinkId}`;\n            this.edgeError = \"block\";\n          }\n        }\n      });\n    }\n    printPath(path) {\n      var pathStr = '';\n      for (let vertex of path) {\n        pathStr += vertex.id + ' -> ';\n      }\n      return pathStr.substring(0, pathStr.length - 4);\n    }\n    isFlowBelowCapacity() {\n      if (this.graphInitServices.network.adjMatrix[this.edgeSource.getValue()][this.edgeTarget.getValue()].capacity >= this.flow.value) {\n        return true;\n      }\n      return false;\n    }\n    onSubmit() {\n      if (this.selectedEdge && this.edgeSource.getValue() && this.edgeTarget.getValue()) {\n        this.graphInitServices.removeHighlightedEdges();\n        this.graphInitServices.network.adjMatrix[this.edgeSource.getValue()][this.edgeTarget.getValue()].flow = this.flow.value;\n        var label = this.selectedEdge.css('label');\n        var parts = label.split('/');\n        if (parts.length == 2) {\n          this.selectedEdge.css('label', this.flow.value + '/' + parts[1]);\n        }\n        this.counter.next(this.counter.getValue() + 1);\n        this.selectedEdge.addClass('selected');\n        this.flowFormGroup.reset();\n        this.showForm = false;\n        this.msg = 'Select an edge by clicking on the graph.';\n      }\n    }\n    calculateFlow() {\n      if (!this.graphInitServices.isFlowValid()) {\n        this.flowError = 'block';\n      } else this.showFlowInput = true;\n    }\n    compute() {\n      this.showResult = \"block\";\n      if (this.flowVal.value == this.graphInitServices.checkFlowAmount(0)) {\n        this.resultFlowCheck = `Correct! The flow is ${this.flowVal.value}.`;\n      } else {\n        this.resultFlowCheck = \"Incorrect flow amount! (Hint: Please make sure it is equal to the sum of the flow out of the source (and flow into the sink).)\";\n      }\n    }\n    closeModalFlow() {\n      this.flowError = 'none';\n    }\n    closeModalEdge() {\n      this.edgeError = \"none\";\n    }\n    closeModalResult() {\n      this.showResult = \"none\";\n    }\n    goBack() {\n      this.graphInitServices.resetNodes();\n      this.graphInitServices.resetEdges();\n      this.graphInitServices.makeGraph();\n      this.flowFormGroup.reset();\n      this.router.navigate(['/step-one']);\n    }\n    static #_ = this.ɵfac = function SendFlowComponent_Factory(t) {\n      return new (t || SendFlowComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.GraphInitService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SendFlowComponent,\n      selectors: [[\"app-send-flow\"]],\n      inputs: {\n        msg: \"msg\"\n      },\n      decls: 43,\n      vars: 19,\n      consts: [[1, \"path-log\", \"mb-2\", \"mt-1\"], [4, \"ngFor\", \"ngForOf\"], [\"id\", \"flow-input\", 4, \"ngIf\"], [1, \"row\", \"mt-2\"], [1, \"col-lg-6\", \"mb-1\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"button\", 1, \"regular-btn\", 3, \"click\"], [4, \"ngIf\"], [\"id\", \"edgeInvalidModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"edgeInvalidModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", 3, \"ngStyle\"], [\"role\", \"document\", 1, \"modal-dialog\", \"modal-dialog-centered\"], [1, \"modal-content\"], [1, \"modal-body\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"id\", \"errorModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"errorModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", 3, \"ngStyle\"], [\"id\", \"resultModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"resultModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", 3, \"ngStyle\"], [\"id\", \"flow-input\"], [\"id\", \"graph-input\", 3, \"formGroup\", \"ngSubmit\"], [1, \"input-wrapper\"], [1, \"input-field\"], [\"for\", \"flow\"], [\"type\", \"text\", \"id\", \"flow\", \"formControlName\", \"flow\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"mt-3\"], [\"type\", \"submit\", 1, \"mb-2\", 3, \"disabled\"], [1, \"error-message\"], [3, \"formGroup\", \"ngSubmit\"], [\"for\", \"flowVal\"], [\"type\", \"text\", \"id\", \"flowVal\", \"formControlName\", \"flowVal\"], [\"type\", \"submit\", 1, \"mt-3\", 3, \"disabled\"]],\n      template: function SendFlowComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h4\");\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 0)(3, \"p\");\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(5, SendFlowComponent_p_5_Template, 2, 1, \"p\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, SendFlowComponent_div_6_Template, 11, 3, \"div\", 2);\n          i0.ɵɵelementStart(7, \"div\", 3)(8, \"div\", 4)(9, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function SendFlowComponent_Template_button_click_9_listener() {\n            return ctx.calculateFlow();\n          });\n          i0.ɵɵtext(10, \"Calculate flow\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"div\", 4)(12, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function SendFlowComponent_Template_button_click_12_listener() {\n            return ctx.goBack();\n          });\n          i0.ɵɵtext(13, \" Back to step 1 \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"div\", 3);\n          i0.ɵɵtemplate(15, SendFlowComponent_div_15_Template, 10, 3, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"div\", 8)(17, \"div\", 9)(18, \"div\", 10)(19, \"div\", 11);\n          i0.ɵɵtext(20);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\", 12)(22, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function SendFlowComponent_Template_button_click_22_listener() {\n            return ctx.closeModalEdge();\n          });\n          i0.ɵɵtext(23, \" Close \");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(24, \"div\", 14)(25, \"div\", 9)(26, \"div\", 10)(27, \"div\", 11);\n          i0.ɵɵtext(28, \" The flow is invalid! (Hint: double check each \");\n          i0.ɵɵelementStart(29, \"em\");\n          i0.ɵɵtext(30, \"internal\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(31, \" vertices if the sum of flow in = sum of flow out [conservation constraint]) \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"div\", 12)(33, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function SendFlowComponent_Template_button_click_33_listener() {\n            return ctx.closeModalFlow();\n          });\n          i0.ɵɵtext(34, \" Close \");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(35, \"div\", 15)(36, \"div\", 9)(37, \"div\", 10)(38, \"div\", 11);\n          i0.ɵɵtext(39);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(40, \"div\", 12)(41, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function SendFlowComponent_Template_button_click_41_listener() {\n            return ctx.closeModalResult();\n          });\n          i0.ɵɵtext(42, \" Close \");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate(ctx.msg);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate2(\"Available paths from \", ctx.sourceTxt, \" to \", ctx.sinkTxt, \"\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.paths);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showForm);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngIf\", ctx.showFlowInput);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(13, _c0, ctx.edgeError));\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate3(\" The edge selected (\", ctx.selectedEdgeTxt, \") is not on any paths from the source \", ctx.sourceTxt, \" to the sink \", ctx.sinkTxt, \"! Please select again. \");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(15, _c0, ctx.flowError));\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(17, _c0, ctx.showResult));\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.resultFlowCheck, \" \");\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgIf, i4.NgStyle, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n    });\n  }\n  return SendFlowComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}