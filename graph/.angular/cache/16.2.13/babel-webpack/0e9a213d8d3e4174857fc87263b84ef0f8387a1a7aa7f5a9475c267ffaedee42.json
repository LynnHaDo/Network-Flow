{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport { GraphInitService } from 'src/app/services/graph-init.service';\nimport { FlowValidator } from 'src/app/validators/flow-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/graph-init.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SelectNodesComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter the source node\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SelectNodesComponent_div_8_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter a number\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SelectNodesComponent_div_8_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter a number within the range!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SelectNodesComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, SelectNodesComponent_div_8_div_1_Template, 3, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, SelectNodesComponent_div_8_div_2_Template, 3, 0, \"div\", 16);\n    i0.ɵɵtemplate(3, SelectNodesComponent_div_8_div_3_Template, 3, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.source.errors == null ? null : ctx_r0.source.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.source.errors == null ? null : ctx_r0.source.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.source.errors == null ? null : ctx_r0.source.errors[\"checkSourceSinkId\"]);\n  }\n}\nfunction SelectNodesComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter the sink node.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SelectNodesComponent_div_14_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter a number.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SelectNodesComponent_div_14_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please enter a number within the range!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SelectNodesComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, SelectNodesComponent_div_14_div_1_Template, 3, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, SelectNodesComponent_div_14_div_2_Template, 3, 0, \"div\", 16);\n    i0.ɵɵtemplate(3, SelectNodesComponent_div_14_div_3_Template, 3, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.sink.errors == null ? null : ctx_r1.sink.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.sink.errors == null ? null : ctx_r1.sink.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.sink.errors == null ? null : ctx_r1.sink.errors[\"checkSourceSinkId\"]);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"display\": a0\n  };\n};\nexport let SelectNodesComponent = /*#__PURE__*/(() => {\n  class SelectNodesComponent {\n    get source() {\n      return this.graphFormGroup.get('source');\n    }\n    get sink() {\n      return this.graphFormGroup.get('sink');\n    }\n    constructor(formBuilder, graphInitService, router) {\n      this.formBuilder = formBuilder;\n      this.graphInitService = graphInitService;\n      this.router = router;\n      this.graphFormGroup = this.formBuilder.group({\n        source: new FormControl('1', [Validators.required, Validators.pattern('^(0|[1-9][0-9]*)$'), FlowValidator.checkSourceSinkId(this.graphInitService.vertices.length)]),\n        sink: new FormControl('13', [Validators.required, Validators.pattern('^(0|[1-9][0-9]*)$'), FlowValidator.checkSourceSinkId(this.graphInitService.vertices.length)])\n      });\n      this.displayStyle = \"none\";\n    }\n    ngOnInit() {\n      GraphInitService.areSourceSinkSet.next(false);\n    }\n    // Select source and sink\n    onSubmit() {\n      this.graphInitService.resetNodes();\n      const sourceId = parseInt(this.graphFormGroup.get('source').value);\n      const sinkId = parseInt(this.graphFormGroup.get('sink').value);\n      if (!this.graphInitService.network.areTwoNodesConnected(sourceId, sinkId)) {\n        this.displayStyle = \"block\";\n        return;\n      }\n      this.graphInitService.highlightNode(sourceId);\n      this.graphInitService.highlightNode(sinkId);\n      this.graphInitService.setSourceandSink(sourceId, sinkId);\n      this.graphInitService.findPathsBetweenSourceAndSink();\n      this.router.navigate(['step-two']);\n    }\n    closeModal() {\n      this.displayStyle = \"none\";\n    }\n    static #_ = this.ɵfac = function SelectNodesComponent_Factory(t) {\n      return new (t || SelectNodesComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.GraphInitService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SelectNodesComponent,\n      selectors: [[\"app-select-nodes\"]],\n      decls: 25,\n      vars: 7,\n      consts: [[\"id\", \"graph-input\", 3, \"formGroup\", \"ngSubmit\"], [1, \"input-wrapper\"], [1, \"input-field\"], [\"for\", \"source\"], [\"type\", \"text\", \"id\", \"source\", \"formControlName\", \"source\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"input-field\", \"mt-2\"], [\"type\", \"text\", \"id\", \"sink\", \"formControlName\", \"sink\"], [\"type\", \"submit\", 1, \"fill-btn\", \"mt-3\", 3, \"disabled\"], [\"id\", \"errorModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"errorModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", 3, \"ngStyle\"], [\"role\", \"document\", 1, \"modal-dialog\", \"modal-dialog-centered\"], [1, \"modal-content\"], [1, \"modal-body\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"error-message\"], [4, \"ngIf\"]],\n      template: function SelectNodesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h4\");\n          i0.ɵɵtext(1, \"Enter a source node and a sink node\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function SelectNodesComponent_Template_form_ngSubmit_2_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Source\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(8, SelectNodesComponent_div_8_Template, 4, 3, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 1)(10, \"div\", 6)(11, \"label\", 3);\n          i0.ɵɵtext(12, \"Sink\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(14, SelectNodesComponent_div_14_Template, 4, 3, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"button\", 8);\n          i0.ɵɵtext(16, \" Continue \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 9)(18, \"div\", 10)(19, \"div\", 11)(20, \"div\", 12);\n          i0.ɵɵtext(21, \" The source and sink are not connected! Please choose another set of vertices. \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"div\", 13)(23, \"button\", 14);\n          i0.ɵɵlistener(\"click\", function SelectNodesComponent_Template_button_click_23_listener() {\n            return ctx.closeModal();\n          });\n          i0.ɵɵtext(24, \"Close\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.graphFormGroup);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.source.invalid && (ctx.source.touched || ctx.source.dirty));\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.sink.invalid && (ctx.sink.touched || ctx.sink.dirty));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.graphFormGroup.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(5, _c0, ctx.displayStyle));\n        }\n      },\n      dependencies: [i4.NgIf, i4.NgStyle, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n    });\n  }\n  return SelectNodesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}